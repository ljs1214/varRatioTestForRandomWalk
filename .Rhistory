knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(broom, latex2exp, leaflet, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel, rddtools, readxl, emoGG, dslabs, gapminder, extrafont, Ecdat, wooldridge, tidyverse, janitor, kableExtra, gridExtra, estimatr)
# Define pink color
red_pink <- "#e64173"
turquoise <- "#20B2AA"
orange <- "#FFA500"
red <- "#fb6107"
blue <- "#3b3b9a"
green <- "#8bb174"
grey_light <- "grey70"
grey_mid <- "grey50"
grey_dark <- "grey20"
purple <- "#6A5ACD"
slate <- "#314f4f"
dat1 <- read.table("problem1.txt",header=T)
dat1
summary(dat1)
options(digits=3) # the option "digits" controls the number of digits to print
ggpairs(dat1,lower = list(continuous = "cor"), upper = list(continuous = "points"))
install.packages("dbplyr")
install.packages("knitr")
install.packages("ggplot2")
install.packages("GGally")
install.packages("dbplyr")
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(broom, latex2exp, leaflet, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel, rddtools, readxl, emoGG, dslabs, gapminder, extrafont, Ecdat, wooldridge, tidyverse, janitor, kableExtra, gridExtra, estimatr)
# Define pink color
red_pink <- "#e64173"
turquoise <- "#20B2AA"
orange <- "#FFA500"
red <- "#fb6107"
blue <- "#3b3b9a"
green <- "#8bb174"
grey_light <- "grey70"
grey_mid <- "grey50"
grey_dark <- "grey20"
purple <- "#6A5ACD"
slate <- "#314f4f"
library(dplyr)
library(knitr)
library(ggplot2)
library(GGally)
library(dplyr)
library(knitr)
library(ggplot2)
library(GGally)
ggpairs(dat1,lower = list(continuous = "cor"), upper = list(continuous = "points"))
Output <- dat1$Output
SI <- dat1$SI
SP <- dat1$SP
I <- dat1$I
lm1 <- lm(Output~SI+SP+I)
summary(lm1)
lm2 <- lm(Output~SI+SP+I+I(SI^2)+I(SP*I))
summary(lm2)
y <- dat1$Output # an explained variable
rep(1,17) # make a vector of ones
x <- cbind(rep(1,17), dat1[,-c(1,5)]) # bind a column of ones to all except the last three columns columns of the data from dat1
x <- as.matrix(x) # force x from being a data frame to a matrix x
xtxi <- solve(t(x) %*% x) # compute (XTX)-1
xtxi # it is the same as the output obtained from the command "summary(dat1)"
beta <- xtxi %*% t(x) %*% y # the β-hat
beta
help("solve")
solve( ) # solve the normal equation
help("solve")
solve(t(x)%*%x, t(x)%*%y) # solve the normal equation
deviance(lm1) # the "deviance" command returns ESS for a regression fitted model.
lm1$coef  # get β-hat from the fitted model dat1
yhat <- x %*% beta # y-hat=X(β-hat)
cbind(yhat, lm1$fitted) # compare if they are identical
res <- y - yhat # the residuals u-hat
cbind(res, lm1$resid) # compare if they are identical
sum(res*yhat)  # their inner product = 0
t(x) %*% res # XT(ε-hat)
sum(res*res) # the ESS
lm1$df # the degrees of freedom, df = 17-4, why?
sighat <- sqrt(sum(res*res)/lm1$df) # calculate σ-hat
sighat
diag(xtxi)
# the "diag" command extracts the diagonal of a matrix.
# The output is the diagonal entries of (XTX)-1
sqrt(diag(xtxi))*sighat
summary(lm1)$coef[,2]  # compare with the previous outputs
# Type your results/observations after the colon
# What is `sqrt(diag(xtxi))*sighat`?:
TBD
mean(y) # calculate the mean of y
sum((y-mean(y))^2) # the total sum of squares
1 - sum(res*res) / sum((y-mean(y))^2) # Compute the R^2
cor(y,yhat)^2 # Q: why is it equal R2?
var(yhat)/var(y) # Q: why is it equal R^2?
z <- sqrt(diag(xtxi)) # Calculate the correlation matrix of β-hat.
xtxi / z %o% z # the correlation matrix, where %o% means outer-product zzT
summary(lm1, cor=T) # with the option "cor=T", the output will contain the correlation matrix of the estimated parameters
summary(lm1, cor=T)$cor # take a look of the correlation matrix of β's estimators
dat2 <- read.table("problem2.txt")
dat2
summary(dat2)
lcavol <- dat2$lcavol
age <- dat2$age
lbph <- dat2$lbph
svi <- dat2$svi
lcp <- dat2$lcp
gleason <- dat2$gleason
pgg45 <- dat2$pgg45
lpsa <- dat2$lpsa
fit1 <- lm( , data = dat2)
summary(fit1)
summary_1 <- summary(fit1)
summary_2 <- lm(lpsa ~ lcavol + lweight, data = dat2) %>% summary()
summary_3 <- lm(lpsa ~ lcavol + lweight + svi, data = dat2) %>% summary()
summary_4 <- lm(lpsa ~ lcavol + lweight + svi + lbph, data = dat2) %>% summary()
summary_5 <- lm(, data = dat2) %>% summary()
summary_6 <- lm(lpsa ~ lcavol + lweight + svi + lbph + age + lcp, data = dat2) %>% summary()
summary_7 <- lm(lpsa ~ lcavol + lweight + svi + lbph + age + lcp + pgg45, data = dat2) %>% summary()
summary_8 <- lm(lpsa ~ ., data = dat2) %>% summary()
total_mse <- c(summary_1$sigma, summary_2$sigma, summary_3$sigma, summary_4$sigma,summary_5$sigma, summary_6$sigma, summary_7$sigma, summary_8$sigma)
total_r2 <- c(summary_1$r.squared, summary_2$r.squared, summary_3$r.squared, summary_4$r.squared, summary_5$r.squared, summary_6$r.squared, summary_7$r.squared, summary_8$r.squared)
total_adjr2 <- c(summary_1$adj.r.squared, summary_2$adj.r.squared,
summary_3$adj.r.squared, summary_4$adj.r.squared,
summary_5$adj.r.squared, summary_6$adj.r.squared,
summary_7$adj.r.squared, summary_8$adj.r.squared)
matrix(round(c(total_mse, total_r2, total_adjr2),3), ncol = 3) %>%
`colnames<-`(c('$\\hat{\\sigma}$', '$R^2$', '$R_{adj}^2$')) %>%
`rownames<-`(c('model 1', 'model 2', 'model 3', 'model 4', 'model 5',
'model 6', 'model 7', 'model 8')) %>% kable()
statistic <- data.frame(stat=c(total_mse, total_r2, total_adjr2),
class=rep(c('sigma hat','r2','adjr2'), each=8),
model = rep(1:8, 3))
ggplot(data = statistic, aes(x = model, y = stat, col = class))+
geom_point()+
geom_line()+
theme_bw()
fit10 <- lm(lcavol ~ lpsa, data = dat2)
ggplot(data = dat2, aes(x = lcavol, y = lpsa))+
geom_point()+
theme_bw()+
geom_abline(intercept = fit1$coefficients[1], slope = fit1$coefficients[2],
col = "red", lwd = 1)+
geom_abline(intercept = -fit10$coefficients[1]/fit10$coefficients[2],
slope = 1/fit10$coefficients[2], col = "blue", lwd = 1)
matrix(c(fit1$coefficients, fit10$coefficients), ncol = 2, byrow = T) %>%
`colnames<-`(c('$\\hat{\\beta_0}$', '$\\hat{\\beta_1}$')) %>%
`rownames<-`(c("model 9", "model 10")) %>%
kable()
matrix(c(fit1$coefficients, fit10$coefficients), ncol = 2, byrow = T) %>%
`colnames<-`(c('$\\hat{\\beta_0}$', '$\\hat{\\beta_1}$')) %>%
`rownames<-`(c("model 9", "model 10"))
matrix(c(fit1$coefficients, fit10$coefficients), ncol = 2, byrow = T) %>%
`colnames<-`(c('$\\hat{\\beta_0}$', '$\\hat{\\beta_1}$')) %>%
`rownames<-`(c("model 9", "model 10"))
fit1$coefficients
fit10$coefficients
matrix(c(fit1$coefficients, fit10$coefficients), ncol = 2, byrow = T) %>%
`colnames<-`(c('$\\hat{\\beta_0}$', '$\\hat{\\beta_1}$')) %>%
`rownames<-`(c("model 9", "model 10")) %>%
kable()
fit10$coefficients
fit1$coefficients
fit10 <- lm(lcavol ~ lpsa, data = dat2)
fit9 <- lm(lpsa ~ lcavol, data = dat2)
ggplot(data = dat2, aes(x = lcavol, y = lpsa))+
geom_point()+
theme_bw()+
geom_abline(intercept = fit1$coefficients[1], slope = fit1$coefficients[2],
col = "red", lwd = 1)+
geom_abline(intercept = -fit10$coefficients[1]/fit10$coefficients[2],
slope = 1/fit10$coefficients[2], col = "blue", lwd = 1)
fit1$coefficients
matrix(c(fit9$coefficients, fit10$coefficients), ncol = 2, byrow = T) %>%
`colnames<-`(c('$\\hat{\\beta_0}$', '$\\hat{\\beta_1}$')) %>%
`rownames<-`(c("model 9", "model 10")) %>%
kable()
matrix(c(fit9$coefficients, fit10$coefficients), ncol = 2, byrow = T) %>%
`colnames<-`(c('$\\hat{\\beta_0}$', '$\\hat{\\beta_1}$')) %>%
`rownames<-`(c("model 9", "model 10")) %>%
kable()
matrix(c(mean(dat2$lcavol), mean(dat2$lpsa)), nrow = 2) %>%
`colnames<-`('Mean') %>% `rownames<-`(c('lcavol', 'lpsa')) %>% kable()
matrix(c(mean(dat2$lcavol), mean(dat2$lpsa)), nrow = 2) %>%
`colnames<-`('Mean') %>% `rownames<-`(c('lcavol', 'lpsa')) %>% kable()
fit10 <- lm(lcavol ~ lpsa, data = dat2)
fit9 <- lm(lpsa ~ lcavol, data = dat2)
ggplot(data = dat2, aes(x = lcavol, y = lpsa))+
geom_point()+
theme_bw()+
geom_abline(intercept = fit9$coefficients[1], slope = fit9$coefficients[2],
col = "red", lwd = 1)+
geom_abline(intercept = -fit10$coefficients[1]/fit10$coefficients[2],
slope = 1/fit10$coefficients[2], col = "blue", lwd = 1)
#' @examples
devtools::document()
install.packages('devtools')
devtools::document()
devtools::document()
devtools::build("path/to/yourPackageName")
rlang::last_trace()
devtools::build("./varRatioTestForRandomWalk")
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC")
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::check("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::check("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
devtools::document()
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
library(varRatioTestForRandomWalk)
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
variance_ratio_test(dt, 8, 'homo')
variance_ratio_test(dt, 8, 'homo')
devtools::document()
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
variance_ratio_test(dt, 8, 'homo')
variance_ratio_test(dt, 8, 'hetero')
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
```
variance_ratio_test(dt, 8, 'hetero')
library(varRatioTestForRandomWalk)
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
variance_ratio_test(dt, 8, 'hetero')
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
library(varRatioTestForRandomWalk)
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
variance_ratio_test(dt, 8, 'hetero')
variance_ratio_test(dt, 8, 'homo')
variance_ratio_test(dt, 7, 'homo')
variance_ratio_test(dt, 7, 'hetero')
variance_ratio_test(dt, 7, 'homo')
variance_ratio_test(dt, 7, 'hom')
variance_ratio_test(dt, 7, 'homo')
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
library(varRatioTestForRandomWalk)
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
variance_ratio_test(dt, 7, 'homo')
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
library(varRatioTestForRandomWalk)
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
variance_ratio_test(dt, 7, 'homo')
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
library(varRatioTestForRandomWalk)
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
variance_ratio_test(dt, 7, 'homo')
check_cran()
devtools::check_cran()
library(varRatioTestForRandomWalk)
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
variance_ratio_test(dt, 7, 'homo')
variance_ratio_test(dt, 2, 'homo')
variance_ratio_test(dt, 2, 'homo')
variance_ratio_test(dt, 1, 'homo')
variance_ratio_test(dt, 3, 'homo')
variance_ratio_test(dt, 8, 'homo')
variance_ratio_test(dt, 9, 'homo')
variance_ratio_test(dt, 10, 'homo')
variance_ratio_test(dt, 8, 'homo')
dt <- read_csv('AUDHKD.csv')
devtools::document()
devtools::build("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
devtools::install("/Users/nianhua/Downloads/codeForTerm2/5310FA/ProjectC/varRatioTestForRandomWalk/")
variance_ratio_test(dt, 8, 'homo')
library(varRatioTestForRandomWalk)
dt <- read_csv('AUDHKD.csv')
dt <- dt$Close
runs_test(dt)
devtools::install_github("ljs1214/varRatioTestForRandomWalk")
